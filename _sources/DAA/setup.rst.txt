DAA Development
===============

This page contains some brief notes on how I setup to development the DAA. 
It's by no means a step by step guide, but hopefully provides enough pointers.

For additional information on the DAA, see the administration guide: `Maglab Admin Guide <http://alfred.liv.ac.uk/docs/administration/websites/daa.html>`_

Software
^^^^^^^^

The DAA is built using Python and the Django framework. At present it uses Python 2.7 and Django 1.8. The backend database is PostgreSQL.

IDE
^^^

I have been using LiClipse for development, it seems to provide quite good support for development in Python. 
However Eclipse and PyCharm are possibly the more widely used options generally speaking for Python development.

Setup
^^^^^

The following are some very approximate notes on the steps to get a local version of the DAA running.

The code can be checked out into a new directory locally using::

    git clone git@alfred.liv.ac.uk:thomas/the-digital-ageing-atlas.git

For click Git `here` for details on Git.

In the IDE, point a new python project at this location and change the project preferences.

Once the code is checked out, dependencies are required, to do this install pip and virtualenv on the local machine. More information can be found at: `<https://packaging.python.org/guides/installing-using-pip-and-virtualenv/>`_

Create a virtual environment called 'env'::

    virtualenv env

Then activate the new virtualenv directory by running::

    env/bin/source activate

After this any new python packages installed will be installed in the env directory, thus isolating them for the project

To install the dependencies for the DAA project run::

    pip install -r requirements.txt

Configure the project preferences in the IDE to ensure it uses the version of python installed in the virtualenv.

Database
^^^^^^^^

Install postgres 9.3 locally. Once installed create a database called daa or beta_daa.

The best way to get the data is to take an export of the Live database or another recent export. 

Configuration
^^^^^^^^^^^^^

Django uses a settings.py file to store variation configuration options. You'll need to change the database name, user and password. There are also a couple of places where directories, so these will need adjusting

Run the Application
^^^^^^^^^^^^^^^^^^^

Django comes with it's own basic webserver, for development I have used this by running the following command (create a new run configuration) from with the IDE::

    manage.py runserver
    
The above command needs to use the python version that has been packaged up in the virtualenv directory. 